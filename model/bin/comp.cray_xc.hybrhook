#!/bin/sh
# --------------------------------------------------------------------------- #
# comp  : Compiler script for use in ad3 - Customised for compilation on the  #
#         IBM Power6 supercomputer using the xlf90_r compiler                 #
#                                                                             #
# use   : comp name                                                           #
#           name: name of source code file without the extension.             #
#                                                                             #
# error codes :  1 : input error                                              #
#                2 : no environment file $ww3_env found.                      #
#                3 : error in creating scratch directory.                     #
#                4 : w3adc error.                                             #
#                5 : compiler error.                                          #
#                                                                             #
# remarks :                                                                   #
#                                                                             #
#  - This script runs from the scratch directory, where it should remain.     #
#                                                                             #
#  - For this script to interact with ad3, it needs to generate / leave       #
#    following files :                                                        #
#       $name.f90   : Source code (generated by ad3).                         #
#       $name.o     : Object module.                                          #
#       $name.l     : Listing file.                                           #
#       comp.stat.$name   : status file of compiler, containing number of     #
#                     errors and number of warnings (generated by comp).      #
#                                                                             #
#                                                                             #
#                                                      Hendrik L. Tolman      #
#                                                      February 2005          #
#                                                                             #
# Modification history:                                                       #
#                                                                             #
#   26-Jan-2015  Modified for Cray XC series.  (Chris Bunney, UK Met Office)  #
#                                                                             #
# --------------------------------------------------------------------------- #
# 1. Preparations                                                             #
# --------------------------------------------------------------------------- #
# 1.a Check and process input

  if [ "$#" != '1' ]
  then
    echo "usage: comp name" ; exit 1
  fi
  name="$1"

# 1.b Initial clean-up - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

  rm -f $name.l
  rm -f $name.o
  rm -f comp.stat.$name

# 1.c Set listing option - - - - - - - - - - - - - - - - - - - - - - - - - - - 

  list=' -list'
  list=

# --------------------------------------------------------------------------- #
# 2. Compile                                                                  #
# --------------------------------------------------------------------------- #
# Add here the correct compiler call including command line options
# Note: - do not invoke a link step
#       - if possible, generate a listing $name.l
#       - make sure the compiler point to the proper directory where the 
#         modules are stored ($m_path), see examples below.

# 2.a Determine file extension - - - - - - - - - - - - - - - - - - - - - - - - 
#     .f90 assumes free format, .f assumes fixed format, change if necessary
# *** file extension (fext) is set and exported by calling program (ad3) ***
# *** (nothing to do here) ***

# 2.b Perform compilation  - - - - - - - - - - - - - - - - - - - - - - - - - - 
#     Save compiler exit code in $OK
#
# sxf90 cross compiler under Linux--------------------------------------------
# 2.b.1 Build options and determine compiler name

# compiler flags description:
#    -c                            Compilation only (no link)

  # Default optimisation option:
  OPT_LEVEL="-O3 -Ovector3"
  # Use this option for performance testing and debug
  #OPT_LEVEL='-G0 -Rbcsp'

  # compiler options string:
  #   -r s     Produces source code and messages listing *.lst file
  #   -O<n>    Compiler optimization level
  #   -eZ      Invoke cpp preprocessor
  #   -G       turn on debugging
  #   -R abcs  Specific runtime debug options
  #   -DNOCOEX turn off WGDOS compression
  opt="-c -eZ -rs ${OPT_LEVEL} -I$path_m"

#  # for INTEL
#  opt="-c -I$path_m"


  if [ "$mpi_mod" = 'yes' ]
  then
    comp=ftn
  else
    comp=ftn
  fi

  if [ "$omp_mod" = 'yes' ]
  then
    opt="$opt -openmp -openmp-report=1"
  else
    opt="$opt -x conditional_omp"
  fi

  if [ "$hook_mod" = 'yes' ]
  then
    if [ -z "$HOOK_INCDIR" ]
    then
      echo "ERROR: \$HOOK_INCDIR not defined"; echo ' '
      return 1
    fi
    opt="$opt -I${HOOK_INCDIR}"
  fi

  #if [ "$netcdf_compile" = 'yes' ]
  #then
  #  case $WWATCH3_NETCDF in
  #    NC3) opt="$opt -I$NETCDF_INCDIR" ;;
  #    NC4) if [ "$mpi_mod" = 'no' ]; then comp="`$NETCDF_CONFIG --fc`"; fi
  #         opt="$opt -I`$NETCDF_CONFIG --includedir`" ;;
  #  esac
  #fi
  # NETCDF :
  # NOTE: Explicit setting of NetCDF paths on Cray is not required as this
  # is handled by loading the cray-netcdf module
  unset NCINC
  if [[ $name = "ww3_ncop" || $name = "ww3_ounf" || $name = "ww3_ounp" || $name = "ww3_smcnf" ]]; then
      module load cray-netcdf
  else
      module unload cray-netcdf
  fi

# 2.b.2 Compile

  eval $comp $opt                             $name.$fext > $name.out 2> $name.err
  OK="$?"

# 2.b.2 Process listing

  if [ -s $name.lst ] 
  then
    mv $name.lst $name.l
  fi

# 2.b.3 Add test output to listing for later viewing

## echo '------------' >> $name.l
## echo "$omp $opt"   >> $name.l
## echo '------------' >> $name.l
## cat $name.out       >> $name.l 2> /dev/null
## echo '------------' >> $name.l
## cat $name.err       >> $name.l 2> /dev/null
## echo '------------' >> $name.l

# --------------------------------------------------------------------------- #
# 3. Postprocessing                                                           #
# --------------------------------------------------------------------------- #
# 3.a Capture errors
#     nr_err : number of errors.
#     nr_war : number of errors.

  nr_err='0'
  nr_war='0'

  if [ -s $name.err ]
  then
    nr_err=$(grep -i 'crayftn: ERROR' $name.err | wc -l | awk '{ print $1 }')
    nr_war=$(grep -i 'crayftn: WARNING' $name.err | wc -l | awk '{ print $1 }')
  else
    if [ "$OK" != '0' ]
    then
      nr_err='1'
    fi
  fi

# 3.b Make file comp.stat  - - - - - - - - - - - - - - - - - - - - - - - - - - 

  echo "ERROR    $nr_err"   > comp.stat.$name
  echo "WARNING  $nr_war"  >> comp.stat.$name

# 3.c Prepare listing  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     if compiler does not provide listing, make listing from source code
#     and compiler messages. Second input line for w3list identifies if
#     comment lines are to be numbered.

##  if [ ! -f $name.l ]
##  then
##    echo "$name.$fext" > w3list.inp
##    echo "T"          >> w3list.inp
##    w3list < w3list.inp 2> /dev/null
##    rm -f w3list.inp
##    mv w3list.out $name.l
##    echo ' '      >> $name.l
##    cat $name.out >> $name.l #2> /dev/null
##    echo ' '      >> $name.l
##    cat $name.err >> $name.l #2> /dev/null
##    echo ' '      >> $name.l
##  fi

# 3.d Remove unwanted files  - - - - - - - - - - - - - - - - - - - - - - - - -
#     include here unwanted files generated by the compiler

#  rm -f $name.out
#  rm -f $name.err

# end of comp --------------------------------------------------------------- #
